name: Node.js CI
on:
  push:
    branches: [ "master" ]
jobs:
  build:
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Install Node.js
        run: |
          curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -
          sudo apt-get install -y nodejs
          node --version
          npm --version
      - name: Install docker
        run: |
          sudo apt-get update -y
          sudo apt install docker.io -y
          sudo usermod -aG docker $USER
  Installing_pm2_and_deploy_application:
     needs: [build]
     runs-on: self-hosted
     steps:
     - name: Checkout code
       uses: actions/checkout@v3
     - name: PM2 installation & Verify
       run: |
           sudo npm install -g pm2
           pm2 --version || true
     - name: Stop existing PM2 processes
       run: |
        cd /home/ubuntu/actions-runner/_work/Node_js_Application1/Node_js_Application1
        sudo pm2 delete all || true
     - name: Start application with PM2
       run: |
          cd /home/ubuntu/actions-runner/_work/Node_js_Application1/Node_js_Application1
           sudo pm2 start index.js --name "my-node-app"
     - name: Check application status
       run: |
        sudo pm2 status
  Create_Docker_image:
         needs: [Installing_pm2_and_deploy_application]
         runs-on: self-hosted
         steps:
           - name: Checkout code
             uses: actions/checkout@v3
           - name: build image
             run: |
               sudo docker build /home/ubuntu/actions-runner/_work/Node_js_Application1/Node_js_Application1 --tag my-node-app
           - name: check docker images
             run: |
               sudo docker images
           
  Pushing_Docker_image_in_jfrog:
    needs: Create_Docker_image
    runs-on: self-hosted
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Push Docker image
      run: |
       sudo docker login -umohd@arintech.in -p ${{ secrets.DOCKER_PASSWORD }} mohdshavej.jfrog.io
       sudo docker tag my-node-app:latest mohdshavej.jfrog.io/my-jfrog-repository/my-node-app:latest
       sudo docker push mohdshavej.jfrog.io/my-jfrog-repository/my-node-app:latest

  Configure_AWS:
   needs: [Create_Docker_image]
   runs-on: self-hosted
   steps:
   - name: Configure AWS credentials
     run: |
       sudo apt install awscli -y
       aws --version
       aws configure set aws_access_key_id ${{secrets.AWS_ACCESS_KEY_ID }}
       aws configure set aws_secret_access_key ${{secrets.AWS_SECRET_ACCESS_KEY }}
       aws configure set default.region us-west-2 # Set your desired region
  
  Configure_ECS:
   needs: [Configure_AWS]
   runs-on: self-hosted
   steps:
   - name: Create ECS Cluster
     run: |
       aws ecs create-cluster --cluster-name my-node-student001

   - name: Existing_Credentials
     run: |
       existing_val=$(aws secretsmanager describe-secret --secret-id Jfrog_mani2 --query 'Name' --output text)
       echo "jfrog: $existing_val"
        echo "jfrog_exists=$existing_val" >> $GITHUB_ENV

   - name: Create Secrets of Jfrog in AWS
     run: |
       if [ "${{ env.jfrog_exists}}" == "Jfrog_mani2" ]; then
       echo "Secret  already exists."
       else
        echo "Secret Jfrog_mani does not exist. Creating..."
        aws secretsmanager create-secret \
          --name Jfrog_mani2 \
          --description "Username and Password of MyJfrog" \
          --secret-string "${{ secrets.JFROG_CRED }}"
       fi
       

        
#    - name: Create Secrets of Jfrog in AWS
#      run: |
#         if [ "Jfrog_mani" == "Jfrog_mani" ]; then
#           echo "$existing_val"
#           echo "Secret Jfrog_mani already exists."
#         else
#           echo "Secret Jfrog_mani does not exist. Creating..."
#           aws secretsmanager create-secret \
#             --name Jfrog_mani \
#             --description "Username and Password of MyJfrog" \
#             --secret-string "${{ secrets.JFROG_CRED }}"
#         fi

 
 #     # Secret already exists
  #    echo "Secret with name $SECRET_NAME already exists."
   #   else
   #   SECRET_VALUE="${{secrets.JFROG_CRED }}"  # Replace this with the actual secret value
   #   aws secretsmanager create-secret --name $SECRET_NAME --secret-string "$SECRET_VALUE"
   #   echo "Secret created successfully."
   #   fi
        
#    - name: Create Secrets of Jfrog in AWS
#      run: |
#       aws secretsmanager create-secret \
#       --name Jfrog_mani \
#       --description "Username and Password of MyJfrog" \
#       --secret-string '${{secrets.JFROG_CRED }}'

  
  
#    - name: Create Secrets of Jfrog in AWS 
#      run: |
#       SECRET_NAME="Jfrog_Cred-student001"
#       SECRET_EXISTS=$(aws secretsmanager describe-secret --secret-id $SECRET_NAME --query "Name" --output text 2>/dev/null)
#       echo "Secret with name $SECRET_NAME already exists."
      
#      if [ "$SECRET_EXISTS" ]; then
 #     # Secret already exists
  #    echo "Secret with name $SECRET_NAME already exists."
   #   else
   #   SECRET_VALUE="${{secrets.JFROG_CRED }}"  # Replace this with the actual secret value
   #   aws secretsmanager create-secret --name $SECRET_NAME --secret-string "$SECRET_VALUE"
   #   echo "Secret created successfully."
   #   fi
      
#       if [  "$SECRET_EXISTS"=="Jfrog_Cred-student001" ]; then
#       aws secretsmanager create-secret \
#       --name Jfrog_Cred-student001 \
#       --description "Username and Password of MyJfrog" \
#       --secret-string '${{secrets.JFROG_CRED }}'
#       else
#       echo "Secret with name $SECRET_NAME already exists."
#       fi
#       aws secretsmanager describe-secret --secret-id Jfrog_Cred-student001
      
      

#    - name: Register Task_Definition
#      run: |
#        aws ecs register-task-definition --cli-input-json file://.github/workflows/task-definition.json
#        aws ecs list-task-definitions
#    - name: Fetch Revision number of Task_Definition
#      run: |
#       latest_revision=$(aws ecs describe-task-definition --task-definition node-app-deploy-student001 --query 'taskDefinition.revision')
#       echo "Latest revision: $latest_revision"  
#    - name: Check if ECS service exists
#      id: check-service
#      run: |
#         service_name="my-node-service-student001"
#         existing_service=$(aws ecs describe-services --cluster my-node-student001 --services $service_name --query 'services[0].serviceName' --output text)
#         echo "service_exists=$existing_service" >> $GITHUB_ENV
      
      
      
#    - name: Create or update ECS service
#      run: |
#       if [[ "${{ env.service_exists }}" == "my-node-service-student001" ]]; then
#         echo "Service already exists. Performing update..."
#         latest_revision=$(aws ecs describe-task-definition --task-definition node-app-deploy-student001 --query 'taskDefinition.revision')
#         echo "Latest revision: $latest_revision"
#         aws ecs update-service --cluster my-node-student001 --service my-node-service-student001 --desired-count 1 --task-definition node-app-deploy-student001:$latest_revision
#       else
#         echo "Service does not exist. Creating a new service..."
#         latest_revision=$(aws ecs describe-task-definition --task-definition node-app-deploy-student001 --query 'taskDefinition.revision')
#         echo "Latest revision: $latest_revision"
#         aws ecs create-service --cluster my-node-student001 --service-name my-node-service-student001 --task-definition node-app-deploy-student001:$latest_revision --desired-count 1 --launch-type "FARGATE" --network-configuration "awsvpcConfiguration={subnets=[subnet-0ab5a9b7768b9b147],securityGroups =[sg-0c51e41191fbc4535],assignPublicIp=ENABLED}"
#       fi
        
#    - name: Wait for service to stabilize
#      run: |
#         echo "Waiting for service to stabilize..."
#         aws ecs wait services-stable --cluster my-node-student001 --services my-node-service-student001
   
#    - name: Featch_Public_IP_Address
#      run: |
#       task_id=$(aws ecs list-tasks --cluster my-node-student001 --family node-app-deploy-student001 --query 'taskArns[0]' --output text | awk -F / '{print $NF}')
#       task_arn=$(aws ecs describe-tasks --cluster my-node-student001 --tasks $task_id --query 'tasks[0].taskArn' --output text)
#       eni_number=$(aws ecs describe-tasks --cluster my-node-student001 --tasks $task_arn --query 'tasks[0].attachments[0].details[?name==`networkInterfaceId`].value' --output text) eni_id=$eni_number
#       public_ip=$(aws ec2 describe-network-interfaces --network-interface-ids $eni_id --query 'NetworkInterfaces[0].Association.PublicIp' --output text)
#       echo $public_ip
